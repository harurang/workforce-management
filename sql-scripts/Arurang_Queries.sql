-- 3
-- DESCRIPTION: LIST COMPANIESâ€™ LABOR COST (TOTAL SALARIES AND WAGE RATES BY 1920 HOURS) IN DESCENDING ORDER. 
SELECT COMP_ID, SUM(NVL((PAY_RATE * HOURS) / 1920 , 0)) AS TOTAL_WAGE, 
SUM(NVL(PAY_RATE,0) + NVL(HOURS * PAY_RATE, 0)) AS TOTAL_SAL
FROM PAID_BY INNER JOIN JOB_LISTING
ON PAID_BY.LISTING_ID = JOB_LISTING.LISTING_ID
INNER JOIN JOB
ON JOB.JOB_CODE = JOB_LISTING.JOB_CODE
GROUP BY COMP_ID
ORDER BY TOTAL_SAL DESC;

-- 5
-- DESCRIPTION: GETS THE SKILLS FOR EACH PERSON.
SELECT PERSON.NAME, KNOWLEDGE_SKILL.KS_CODE 
FROM PERSON LEFT JOIN PERSON_SKILL ON PERSON.PER_ID = PERSON_SKILL.PER_ID 
LEFT JOIN KNOWLEDGE_SKILL ON PERSON_SKILL.KS_CODE = KNOWLEDGE_SKILL.KS_CODE;

-- 6 
-- DESCRIPTION: GETS THE SKILL GAP BETWEEN A WORKER AND THEIR JOB.
-- GET JOB SKILLS OF PERSON
SELECT KS_CODE 
FROM PAID_BY INNER JOIN JOB_LISTING 
ON PAID_BY.LISTING_ID = JOB_LISTING.LISTING_ID
INNER JOIN JOB_SKILL
ON JOB_SKILL.JOB_CODE = JOB_LISTING.JOB_CODE
WHERE PER_ID=2 

MINUS

-- GET PERSON SKILLS 
SELECT KS_CODE FROM PERSON_SKILL WHERE PER_ID=2;

-- 7
-- A
-- DESCRIPTION: GETS REQUIRED SKILLS FOR EACH JOB.
SELECT JOB_TITLE, TITLE AS SKILL 
FROM JOB_SKILL LEFT JOIN JOB ON JOB_SKILL.JOB_CODE = JOB.JOB_CODE 
LEFT JOIN KNOWLEDGE_SKILL ON JOB_SKILL.KS_CODE = KNOWLEDGE_SKILL.KS_CODE
WHERE IMPORTANCE='REQUIRED';

-- 7
-- B
-- DESCRIPTION: GETS THE CORE SKILL FOR EACH JOB CATEGORY.
SELECT JOB_CATEGORY.TITLE AS JOB_CATEGORY_TITLE, KNOWLEDGE_SKILL.TITLE AS SKILL_TITLE
FROM JOB_CATEGORY LEFT JOIN KNOWLEDGE_SKILL ON JOB_CATEGORY.KS_CODE = KNOWLEDGE_SKILL.KS_CODE;

-- 8
-- DESCRIPTION: GETS THE DIFFERENCE BETWEEN SKILLS REQUIRED BY A JOB AND SKILLS A PERSON HAS.
SELECT JOB_SKILL.KS_CODE, KNOWLEDGE_SKILL.TITLE 
FROM JOB_SKILL LEFT JOIN KNOWLEDGE_SKILL 
ON JOB_SKILL.KS_CODE = KNOWLEDGE_SKILL.KS_CODE
WHERE JOB_CODE=91
MINUS
SELECT PERSON_SKILL.KS_CODE, KNOWLEDGE_SKILL.TITLE 
FROM PERSON_SKILL LEFT JOIN KNOWLEDGE_SKILL 
ON PERSON_SKILL.KS_CODE = KNOWLEDGE_SKILL.KS_CODE
WHERE PER_ID=5;

-- 9
-- DESCRIPTION: GETS THE COURSE THAT PROVIDES ALL THE SKILLS A PERSON NEEDS FOR A CERTAIN JOB.
SELECT DISTINCT C.TITLE, C.C_CODE
FROM COURSE C RIGHT JOIN COURSE_KNOWLEDGE S
ON C.C_CODE = S.C_CODE
WHERE NOT EXISTS (

  SELECT JOB_SKILL.KS_CODE
  FROM JOB_SKILL 
  WHERE JOB_CODE=44
  MINUS
  SELECT PERSON_SKILL.KS_CODE 
  FROM PERSON_SKILL
  WHERE PER_ID=176
  
  MINUS
  (SELECT KS_CODE
  FROM COURSE A RIGHT JOIN COURSE_KNOWLEDGE B
  ON A.C_CODE = B.C_CODE
  WHERE C.TITLE = A.TITLE)
);

-- 10
-- DESCRIPTION: GETS THE EARLIEST COURSE DATE THAT PROVIDES ALL THE SKILLS A PERSON NEEDS FOR A 
-- CERTAIN JOB.
WITH COURSES AS (
  SELECT TITLE, SECTION.START_DATE, SECTION.END_DATE, SECTION.FORMAT, SECTION.OFFERED_BY FROM SECTION NATURAL JOIN (
    SELECT DISTINCT C.TITLE, C.C_CODE
    FROM COURSE C RIGHT JOIN COURSE_KNOWLEDGE S
    ON C.C_CODE = S.C_CODE
    WHERE NOT EXISTS (
    
      SELECT JOB_SKILL.KS_CODE
      FROM JOB_SKILL LEFT JOIN KNOWLEDGE_SKILL 
      ON JOB_SKILL.KS_CODE = KNOWLEDGE_SKILL.KS_CODE
      WHERE JOB_CODE=44
      MINUS
      SELECT PERSON_SKILL.KS_CODE 
      FROM PERSON_SKILL LEFT JOIN KNOWLEDGE_SKILL 
      ON PERSON_SKILL.KS_CODE = KNOWLEDGE_SKILL.KS_CODE
      WHERE PER_ID=176
      
      MINUS
      (SELECT KS_CODE
      FROM COURSE A RIGHT JOIN COURSE_KNOWLEDGE B
      ON A.C_CODE = B.C_CODE
      WHERE C.TITLE = A.TITLE)
    )
  )
)

SELECT TITLE, START_DATE, END_DATE, FORMAT, OFFERED_BY 
FROM COURSES 
WHERE START_DATE = (SELECT MIN(TO_DATE(START_DATE)) FROM COURSES);

-- 11 
-- DESCRIPTION: GETS THE CHEAPEST COURSE THAT PROVIDES ALL THE SKILLS A PERSON NEEDS FOR A SPECIFIC JOB.
WITH COURSES AS (
  SELECT TITLE, PRICE, SEC_ID FROM SECTION NATURAL JOIN (
    SELECT DISTINCT C.TITLE, C.C_CODE
    FROM COURSE C RIGHT JOIN COURSE_KNOWLEDGE S
    ON C.C_CODE = S.C_CODE
    WHERE NOT EXISTS (
    
      SELECT JOB_SKILL.KS_CODE
      FROM JOB_SKILL 
      WHERE JOB_CODE=44
      MINUS
      SELECT PERSON_SKILL.KS_CODE 
      FROM PERSON_SKILL
      WHERE PER_ID=176
      
      MINUS
      (SELECT KS_CODE
      FROM COURSE A RIGHT JOIN COURSE_KNOWLEDGE B
      ON A.C_CODE = B.C_CODE
      WHERE C.TITLE = A.TITLE)
    )
  )
)

SELECT TITLE, PRICE, SEC_ID FROM COURSES WHERE PRICE = (SELECT MIN(PRICE) FROM COURSES);

-- 12
-- PROVIDED QUERY. 

-- DESCRIPTION: GETS A LIST OF PEOPLE AND THEIR EMAIL WHO ARE QUALIFIED FOR A SPECIFIC JOB. 
--15
SELECT DISTINCT NAME, EMAIL 
FROM PERSON A INNER JOIN PERSON_SKILL B
ON A.PER_ID = B.PER_ID 
WHERE NOT EXISTS (

  -- GET SKILLS OF SPECIFIC JOB
  SELECT JOB_SKILL.KS_CODE
  FROM JOB_SKILL
  WHERE JOB_CODE=44
  
  MINUS
  
  -- GET SKILLS OF PERSON 
  (SELECT KS_CODE
  FROM PERSON C INNER JOIN PERSON_SKILL D 
  ON C.PER_ID = D.PER_ID
  WHERE A.NAME = C.NAME)
);

-- 16
WITH PERSON_REQUIRED_SKILL_CNT AS (
  SELECT PER_ID, COUNT(KS_CODE) AS SKILL_COUNT
  FROM PERSON_SKILL NATURAL JOIN JOB_SKILL
  WHERE JOB_CODE = 31
  GROUP BY PER_ID
)

SELECT PER_ID
FROM PERSON_REQUIRED_SKILL_CNT
WHERE SKILL_COUNT = (SELECT COUNT(*) - 1
FROM JOB_SKILL
WHERE JOB_CODE = 31);

-- 17
WITH PERSON_REQUIRED_SKILL_CNT AS (
  SELECT PER_ID, COUNT(KS_CODE) AS SKILL_COUNT
  FROM PERSON_SKILL NATURAL JOIN JOB_SKILL
  WHERE JOB_CODE = 31
  GROUP BY PER_ID
),

MISSING_ONE AS (
  SELECT PER_ID
  FROM PERSON_REQUIRED_SKILL_CNT
  WHERE SKILL_COUNT = (SELECT COUNT(*) - 1
  FROM JOB_SKILL
  WHERE JOB_CODE = 31)
),

MISSING_AND_SUPRLUS_SKILLS AS (
  SELECT KS_CODE
  FROM PERSON_SKILL A INNER JOIN MISSING_ONE
  ON A.PER_ID = MISSING_ONE.PER_ID
  
  WHERE EXISTS (
    -- GET SKILLS OF JOB
    SELECT KS_CODE 
    FROM JOB_SKILL
    WHERE JOB_CODE = 31
    
    MINUS
    
    -- SKILLS OF PEOPLE
    SELECT KS_CODE
    FROM MISSING_ONE
    INNER JOIN PERSON 
    ON MISSING_ONE.PER_ID = PERSON.PER_ID
    INNER JOIN PERSON_SKILL B
    ON PERSON.PER_ID = B.PER_ID
    WHERE A.KS_CODE = B.KS_CODE
  )
)

SELECT JOB_SKILL.KS_CODE, COUNT(JOB_SKILL.KS_CODE) AS NUMB_MISSING_SKILL
FROM JOB_SKILL INNER JOIN MISSING_AND_SUPRLUS_SKILLS
ON JOB_SKILL.KS_CODE = MISSING_AND_SUPRLUS_SKILLS.KS_CODE
WHERE JOB_SKILL.JOB_CODE = 31
GROUP BY JOB_SKILL.KS_CODE
ORDER BY NUMB_MISSING_SKILL ASC;

-- 21
-- DESCRIPTION: FINDS PEOPLE WHO ONCE HELD A JOB OF SPECIFIC JOB CATEGORY.
SELECT NAME 
FROM JOB_HISTORY INNER JOIN PERSON
ON PERSON.PER_ID = JOB_HISTORY.PER_ID
INNER JOIN JOB_LISTING 
ON JOB_HISTORY.LISTING_ID = JOB_LISTING.LISTING_ID
INNER JOIN JOB
ON JOB_LISTING.JOB_CODE = JOB.JOB_CODE
INNER JOIN JOB_CATEGORY
ON JOB.CATE_CODE = JOB_CATEGORY.CATE_CODE 
WHERE JOB_CATEGORY.TITLE = 'COMPUTER USER SUPPORT SPECIALISTS';

-- 22
-- DESCRIPTION: FINDS UNEMPLOYED PEOPLE WHO ONCE HELD A JOB OF A SPECIFIC JOB CATEOGRY. 
WITH UNEMPLOYED AS (
  SELECT PER_ID, NAME 
  FROM PERSON
  MINUS 
  SELECT PERSON.PER_ID, PERSON.NAME
  FROM PAID_BY INNER JOIN PERSON
  ON PAID_BY.PER_ID = PERSON.PER_ID
)

SELECT NAME 
FROM UNEMPLOYED INNER JOIN JOB_HISTORY 
ON JOB_HISTORY.PER_ID = UNEMPLOYED.PER_ID
INNER JOIN JOB_LISTING
ON JOB_LISTING.LISTING_ID = JOB_HISTORY.LISTING_ID
INNER JOIN JOB
ON JOB_LISTING.JOB_CODE = JOB.JOB_CODE
INNER JOIN JOB_CATEGORY
ON JOB.CATE_CODE = JOB_CATEGORY.CATE_CODE 
WHERE JOB_CATEGORY.TITLE = 'COMPUTER USER SUPPORT SPECIALISTS';

-- 23
-- DESCRIPTION: GETS MAX SALARY OR MAX NUMBER OF EMPLOYEES OF COMPANY

-- GETS SUM OF SALARY OR WAGES FOR EACH COMPANY
WITH COMP_PAYCHECKS AS (
  SELECT SUM(NVL(PAY_RATE,0) + NVL(HOURS * PAY_RATE, 0)) AS SUM_SAL, COMP_NAME 
  FROM PAID_BY INNER JOIN JOB_LISTING
  ON PAID_BY.LISTING_ID = JOB_LISTING.LISTING_ID
  INNER JOIN JOB
  ON JOB_LISTING.JOB_CODE = JOB.JOB_CODE
  INNER JOIN COMPANY
  ON JOB_LISTING.COMP_ID = COMPANY.COMP_ID
  GROUP BY COMP_NAME
),

-- GETS NUMBER OF EMPLOYEES FOR EACH COMPANY
COMP_EMPLOYEE_COUNT AS (
SELECT COMP_NAME, COUNT(*) AS NUMB_EMPLOYEES 
  FROM PAID_BY INNER JOIN JOB_LISTING
  ON PAID_BY.LISTING_ID = JOB_LISTING.LISTING_ID
  INNER JOIN COMPANY
  ON JOB_LISTING.COMP_ID = COMPANY.COMP_ID
  GROUP BY COMP_NAME
)

SELECT COMP_NAME, SUM_SAL, NUMB_EMPLOYEES FROM COMP_PAYCHECKS NATURAL JOIN COMP_EMPLOYEE_COUNT
WHERE SUM_SAL = 
(SELECT MAX(SUM_SAL) FROM COMP_PAYCHECKS) OR 
NUMB_EMPLOYEES = (SELECT MAX(NUMB_EMPLOYEES) FROM COMP_EMPLOYEE_COUNT);

-- 24
-- DESCRIPTION: GETS MAX SALARY OR MAX NUMBER OF EMPLOYEES OF SECTOR

-- TOTAL PAYCHECK BY SECTOR
WITH SECTOR_PAYCHECKS AS (
  SELECT SUM(NVL(PAY_RATE,0) + NVL(HOURS * PAY_RATE, 0)) AS SUM_SAL, PRIMARY_SECTOR 
  FROM PAID_BY INNER JOIN JOB_LISTING
  ON PAID_BY.LISTING_ID = JOB_LISTING.LISTING_ID
  INNER JOIN JOB 
  ON JOB_LISTING.JOB_CODE = JOB.JOB_CODE
  INNER JOIN COMPANY
  ON JOB_LISTING.COMP_ID = COMPANY.COMP_ID
  GROUP BY PRIMARY_SECTOR
),

-- NUMBER OF EMPLOYEES BY SECTOR
SECTOR_EMPLOYEE_COUNT AS (
  SELECT PRIMARY_SECTOR, COUNT(*) AS NUMB_EMPLOYEES 
  FROM PAID_BY INNER JOIN JOB_LISTING
  ON PAID_BY.LISTING_ID = JOB_LISTING.LISTING_ID
  INNER JOIN COMPANY
  ON JOB_LISTING.COMP_ID = COMPANY.COMP_ID
  GROUP BY PRIMARY_SECTOR
)

SELECT PRIMARY_SECTOR, SUM_SAL, NUMB_EMPLOYEES FROM SECTOR_PAYCHECKS NATURAL JOIN SECTOR_EMPLOYEE_COUNT
WHERE SUM_SAL = 
(SELECT MAX(SUM_SAL) FROM SECTOR_PAYCHECKS) OR 
NUMB_EMPLOYEES = (SELECT MAX(NUMB_EMPLOYEES) FROM SECTOR_EMPLOYEE_COUNT);

-- 25
-- FINDS THE AVERAGE SALARY INCREASE FOR WORKERS IN A SPECIFIC SECTOR. 

-- GETS THE PREVIOUS SALARY OF EMPLOYEES IN THE SOFTWARE ENGINEERING PRIMARY SECTOR
WITH PREVIOUS_SAL AS (
  -- GET THE PREVIOUS SALARY OR GET THE PREVIOUS PAY RATE * HOURS
  SELECT NAME, SUM(NVL(PAY_RATE,0) + NVL(HOURS * PAY_RATE, 0)) AS OLD_SAL
  FROM PERSON 
  INNER JOIN JOB_HISTORY 
  ON PERSON.PER_ID = JOB_HISTORY.PER_ID
  INNER JOIN JOB_LISTING
  ON JOB_HISTORY.LISTING_ID = JOB_LISTING.LISTING_ID
  INNER JOIN JOB
  ON JOB.JOB_CODE = JOB_LISTING.JOB_CODE
  INNER JOIN COMPANY
  ON JOB_LISTING.COMP_ID = COMPANY.COMP_ID
  WHERE PRIMARY_SECTOR = 'SOFTWARE ENGINEERING'
  GROUP BY NAME
),

-- GETS THE CURRENT SALARY OF EMPLOYEES IN THE SOFTWARE ENGINEERING PRIMARY SECTOR
CURRENT_SAL AS (
  -- GET THE CURRENT SALARY OR GET THE CURRENT PAY RATE * HOURS
  SELECT NAME, SUM(NVL(PAY_RATE,0) + NVL(HOURS * PAY_RATE, 0)) AS NEW_SAL 
  FROM PERSON 
  INNER JOIN PAID_BY 
  ON PERSON.PER_ID = PAID_BY.PER_ID
  INNER JOIN JOB_LISTING
  ON JOB_LISTING.LISTING_ID = PAID_BY.LISTING_ID
  INNER JOIN JOB
  ON JOB_LISTING.JOB_CODE = JOB.JOB_CODE
  INNER JOIN COMPANY
  ON JOB_LISTING.COMP_ID = COMPANY.COMP_ID
  WHERE PRIMARY_SECTOR = 'SOFTWARE ENGINEERING'
  GROUP BY NAME
),

INCREASE AS (
  SELECT PREVIOUS_SAL.NAME, NEW_SAL/OLD_SAL AS RATIO FROM PREVIOUS_SAL 
  INNER JOIN CURRENT_SAL
  ON PREVIOUS_SAL.NAME = CURRENT_SAL.NAME
  WHERE NEW_SAL/OLD_SAL > 1
)

SELECT AVG(RATIO) AS AVERAGE_INCREASE FROM INCREASE;
 
-- 26
-- DESCRIPTION: FIND A JOB CATEGORY THAT HAS THE LARGEST DIFFERENCE BETWEEN
-- VACANCIES AND THE NUMBER OF JOBLESS PEOPLE WHO ARE QUALIFIED FOR THE JOBS OF THIS CATEGORY.

-- JOBS WITH OPENINGS NOT NUMB OF OPENINGS 
WITH OPENINGS AS (
  SELECT JOB_CODE, COUNT(JOB_CODE) AS NUMB_OPENINGS
  FROM JOB_LISTING
  NATURAL JOIN (
    -- ALL JOB LISTINGS
    SELECT JOB.JOB_CODE
    FROM JOB INNER JOIN JOB_LISTING
    ON JOB.JOB_CODE = JOB_LISTING.JOB_CODE
    MINUS
    -- FILLED JOB LISTINGS
    SELECT JOB.JOB_CODE
    FROM PAID_BY INNER JOIN JOB_LISTING
    ON PAID_BY.LISTING_ID = JOB_LISTING.LISTING_ID
    INNER JOIN JOB
    ON JOB_LISTING.JOB_CODE = JOB.JOB_CODE)
    GROUP BY JOB_CODE
),

-- PEOPLE WHO DO NOT HAVE A JOB
UNEMPLOYED AS (
  SELECT PER_ID, NAME 
  FROM PERSON
  MINUS 
  SELECT PERSON.PER_ID, PERSON.NAME
  FROM PAID_BY INNER JOIN PERSON
  ON PAID_BY.PER_ID = PERSON.PER_ID
),

-- NUMBER SKILLS EACH UNEMPLOYED PERSON HAS IN COMMON WITH EACH OPENING
NUMBSKILLSBYPERSON AS (
  SELECT UNEMPLOYED.NAME, OPENINGS.JOB_CODE, COUNT(JOB_SKILL.KS_CODE) AS NUMBPERSKILLS
  FROM UNEMPLOYED INNER JOIN PERSON_SKILL
  ON UNEMPLOYED.PER_ID = PERSON_SKILL.PER_ID
  INNER JOIN JOB_SKILL 
  ON PERSON_SKILL.KS_CODE = JOB_SKILL.KS_CODE
  INNER JOIN OPENINGS
  ON JOB_SKILL.JOB_CODE = OPENINGS.JOB_CODE
  GROUP BY NAME, OPENINGS.JOB_CODE
),

-- NUMBER OF SKILLS REQUIRED FOR EACH OPENING 
NUMBSKILLSBYJOB AS (
  SELECT OPENINGS.JOB_CODE, COUNT(JOB_SKILL.KS_CODE) AS NUMBJOBSKILLS
  FROM JOB_SKILL INNER JOIN OPENINGS
  ON JOB_SKILL.JOB_CODE = OPENINGS.JOB_CODE
  GROUP BY OPENINGS.JOB_CODE
),

-- UNEMPLOYED PPL THAT ARE QUALIFIED FOR AN OPENING
QUALIFIED AS (
  SELECT NUMBSKILLSBYPERSON.NAME, NUMBSKILLSBYJOB.JOB_CODE, COUNT(NUMBSKILLSBYJOB.JOB_CODE) AS NUMB_QUALIFIED
  FROM NUMBSKILLSBYPERSON INNER JOIN  NUMBSKILLSBYJOB
  ON NUMBSKILLSBYPERSON.JOB_CODE = NUMBSKILLSBYJOB.JOB_CODE
  WHERE (NUMBSKILLSBYJOB.NUMBJOBSKILLS - NUMBSKILLSBYPERSON.NUMBPERSKILLS) = 0
  GROUP BY NUMBSKILLSBYPERSON.NAME, NUMBSKILLSBYJOB.JOB_CODE
),

-- SUM(VACANCIES - QUALIFIED) ACCORDING TO JOB CATEOGRY 
DIFFERENCES AS (
  SELECT CATE_CODE, SUM(OPENINGS.NUMB_OPENINGS - QUALIFIED.NUMB_QUALIFIED) AS DIFF
  FROM OPENINGS NATURAL JOIN QUALIFIED NATURAL JOIN JOB
  GROUP BY CATE_CODE
)  

-- SELECT MAX DIFFERENCE
SELECT CATE_CODE
FROM DIFFERENCES 
WHERE DIFF = (SELECT MAX(DIFF) FROM DIFFERENCES);

-- 27

-- JOBS WITH OPENINGS NOT NUMB OF OPENINGS 
WITH OPENINGS AS (
  SELECT JOB_CODE, COUNT(JOB_CODE) AS NUMB_OPENINGS
  FROM JOB_LISTING
  NATURAL JOIN (
    -- ALL JOB LISTINGS
    SELECT JOB.JOB_CODE
    FROM JOB INNER JOIN JOB_LISTING
    ON JOB.JOB_CODE = JOB_LISTING.JOB_CODE
    MINUS
    -- FILLED JOB LISTINGS
    SELECT JOB.JOB_CODE
    FROM PAID_BY INNER JOIN JOB_LISTING
    ON PAID_BY.LISTING_ID = JOB_LISTING.LISTING_ID
    INNER JOIN JOB
    ON JOB_LISTING.JOB_CODE = JOB.JOB_CODE)
    GROUP BY JOB_CODE
),

-- PEOPLE WHO DO NOT HAVE A JOB
UNEMPLOYED AS (
  SELECT PER_ID, NAME 
  FROM PERSON
  MINUS 
  SELECT PERSON.PER_ID, PERSON.NAME
  FROM PAID_BY INNER JOIN PERSON
  ON PAID_BY.PER_ID = PERSON.PER_ID
),

-- NUMBER SKILLS EACH UNEMPLOYED PERSON HAS IN COMMON WITH EACH OPENING
NUMBSKILLSBYPERSON AS (
  SELECT UNEMPLOYED.NAME, OPENINGS.JOB_CODE, COUNT(JOB_SKILL.KS_CODE) AS NUMBPERSKILLS
  FROM UNEMPLOYED INNER JOIN PERSON_SKILL
  ON UNEMPLOYED.PER_ID = PERSON_SKILL.PER_ID
  INNER JOIN JOB_SKILL 
  ON PERSON_SKILL.KS_CODE = JOB_SKILL.KS_CODE
  INNER JOIN OPENINGS
  ON JOB_SKILL.JOB_CODE = OPENINGS.JOB_CODE
  GROUP BY NAME, OPENINGS.JOB_CODE
),

-- NUMBER OF SKILLS REQUIRED FOR EACH OPENING 
NUMBSKILLSBYJOB AS (
  SELECT OPENINGS.JOB_CODE, COUNT(JOB_SKILL.KS_CODE) AS NUMBJOBSKILLS
  FROM JOB_SKILL INNER JOIN OPENINGS
  ON JOB_SKILL.JOB_CODE = OPENINGS.JOB_CODE
  GROUP BY OPENINGS.JOB_CODE
),

-- UNEMPLOYED PPL THAT ARE QUALIFIED FOR AN OPENING
QUALIFIED AS (
  SELECT NUMBSKILLSBYPERSON.NAME, NUMBSKILLSBYJOB.JOB_CODE, COUNT(NUMBSKILLSBYJOB.JOB_CODE) AS NUMB_QUALIFIED
  FROM NUMBSKILLSBYPERSON INNER JOIN  NUMBSKILLSBYJOB
  ON NUMBSKILLSBYPERSON.JOB_CODE = NUMBSKILLSBYJOB.JOB_CODE
  WHERE (NUMBSKILLSBYJOB.NUMBJOBSKILLS - NUMBSKILLSBYPERSON.NUMBPERSKILLS) = 0
  GROUP BY NUMBSKILLSBYPERSON.NAME, NUMBSKILLSBYJOB.JOB_CODE
),

-- SUM(VACANCIES - QUALIFIED) ACCORDING TO JOB CATEOGRY 
DIFFERENCES AS (
  SELECT CATE_CODE, SUM(OPENINGS.NUMB_OPENINGS - QUALIFIED.NUMB_QUALIFIED) AS DIFF
  FROM OPENINGS NATURAL JOIN QUALIFIED NATURAL JOIN JOB
  GROUP BY CATE_CODE
),

COURSES AS (
  SELECT C.TITLE, C.C_CODE, COUNT(DISTINCT E.PER_ID) NUMB_PPL_COURSE_QUALIFIES
  FROM COURSE C INNER JOIN COURSE_KNOWLEDGE S
  ON C.C_CODE = S.C_CODE
  INNER JOIN PERSON_SKILL
  ON PERSON_SKILL.KS_CODE = S.KS_CODE
  INNER JOIN UNEMPLOYED E
  ON PERSON_SKILL.PER_ID = E.PER_ID
  WHERE NOT EXISTS (
  
    -- GET ALL SKILLS REQUIRED BY JOB CATEGORY 
    SELECT JOB_SKILL.KS_CODE
    FROM JOB_SKILL INNER JOIN JOB
    ON JOB_SKILL.JOB_CODE = JOB.JOB_CODE
    WHERE JOB.CATE_CODE = (
      SELECT CATE_CODE
      FROM DIFFERENCES 
      WHERE DIFF = (SELECT MAX(DIFF) FROM DIFFERENCES))
    MINUS
    -- GET ALL SKILLS AN UNEMPLOYED PERSON HAS
    SELECT PERSON_SKILL.KS_CODE  
    FROM UNEMPLOYED INNER JOIN PERSON_SKILL
    ON UNEMPLOYED.PER_ID = PERSON_SKILL.PER_ID
    
    MINUS
    -- GET ALL THE SKILLS A COURSE OFFERS 
    (SELECT PERSON_SKILL.KS_CODE
    FROM COURSE A INNER JOIN COURSE_KNOWLEDGE B
    ON A.C_CODE = B.C_CODE
    INNER JOIN PERSON_SKILL
    ON PERSON_SKILL.KS_CODE = B.KS_CODE
    INNER JOIN UNEMPLOYED D
    ON PERSON_SKILL.PER_ID = D.PER_ID
    WHERE C.TITLE = A.TITLE
    AND D.PER_ID = E.PER_ID)
  )
  GROUP BY C.TITLE, C.C_CODE
)

SELECT TITLE, NUMB_PPL_COURSE_QUALIFIES
FROM COURSES
WHERE NUMB_PPL_COURSE_QUALIFIES = 
  (SELECT MAX(NUMB_PPL_COURSE_QUALIFIES) FROM COURSES);
